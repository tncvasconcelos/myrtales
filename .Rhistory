ranges_w_data_final[i]
all_files <- list.files(paste0(range.dir), "\\.tif$")
ranges_w_data <- c()
for(i in 1:length(species_w_data)) {
if(any(grepl(species_w_data[i], all_files))){
ranges_w_data[i]  <- all_files[grep(species_w_data[i], all_files)][1]
} else {
ranges_w_data[i] <- "no_data"
}
#cat("","\n")
cat(i, "done.")
cat("","\r")
}
ranges_w_data_final <- subset(ranges_w_data, ranges_w_data!="no_data")
ranges_w_data_final
ranges_w_data_final <- lapply(paste0(range.dir,"/", ranges_w_data_final), raster)
ranges_w_data_final
tree <- read.tree("Polyploidy-gradient/smith_and_brown.tre.txt")
tree
ranges_w_data_final
ranges_w_data
ranges_w_data_final
ranges_w_data_final <- subset(ranges_w_data, ranges_w_data!="no_data")
ranges_w_data_final
ranges <- lapply(paste0(range.dir,"/", ranges_w_data_final), raster)
ranges
strsplit(ranges_w_data_final, "__")
strsplit(ranges_w_data_final, "__")
lapply(strsplit(ranges_w_data_final, "__"), "[[", 2)
lapply(strsplit(ranges_w_data_final, "__"), "[[", 1)
labels <- lapply(strsplit(ranges_w_data_final, "__"), "[[", 2)
lapply(strsplit(ranges_w_data_final, "__"), "[[", 2)
labels <- c()
for (i in 1:length()){
labels[i] <- strsplit(ranges_w_data_final[i], "__")[2]
}
ranges_w_data_final
for (i in 1:length(ranges_w_data_final)){
labels[i] <- strsplit(ranges_w_data_final[i], "__")[2]
}
labels
strsplit(ranges_w_data_final[i], "__")[2]
strsplit(ranges_w_data_final[i], "__")
labels <- c()
for (i in 1:length(ranges_w_data_final)){
labels[i] <- strsplit(ranges_w_data_final[i], "__")[[1]][2]
}
labels[i]
labels
sub("\\.tif$","", tmp1)
tmp1
labels <- c()
for (i in 1:length(ranges_w_data_final)){
tmp1 <- strsplit(ranges_w_data_final[i], "__")[[1]][2]
labels[i] <- sub("\\.tif$","", tmp1)
}
labels
tmp1
labels <- c()
for (i in 1:length(ranges_w_data_final)){
tmp1 <- strsplit(ranges_w_data_final[i], "__")[[1]][2]
if(is.na(tmp1)) {
labels[i] <- "no_name"
} else { labels[i] <- sub("\\.tif$","", tmp1) }
}
labels
sub("\\.tif$","", tmp1)
tmp2
labels <- c()
for (i in 1:length(ranges_w_data_final)){
tmp1 <- strsplit(ranges_w_data_final[i], "__")[[1]][2]
if(is.na(tmp1)) {
labels[i] <- "no_name"
} else {
tmp2 <- sub("\\.tif$","", tmp1)
labels[i] <- sub("","_", tmp2)
}
}
labels
labels <- c()
for (i in 1:length(ranges_w_data_final)){
tmp1 <- strsplit(ranges_w_data_final[i], "__")[[1]][2]
if(is.na(tmp1)) {
labels[i] <- "no_name"
} else {
tmp2 <- sub("\\.tif$","", tmp1)
labels[i] <- sub(" ","_", tmp2)
}
}
labels
names(ranges) <- labels
ranges
names(ranges)
z <- keep.tip(tree, names(ranges))
which(names(ranges) %in% tree$tip.label)
z <- keep.tip(tree, names(ranges)[which(names(ranges) %in% tree$tip.label)])
z
ranges
length(ranges)
pruned_tree <- keep.tip(tree, names(ranges)[which(names(ranges) %in% tree$tip.label)])
ranges
pruned_ranges <- ranges
which(!names(pruned_ranges) %in% pruned_tree$tip.label)
pruned_ranges[which(!names(pruned_ranges) %in% pruned_tree$tip.label)] <- NULL
pruned_ranges
length(pruned_ranges)
pruned_tree
which(names(pruned_ranges) == "no_name")
length(pruned_ranges)
which(!names(pruned_ranges) %in% pruned_tree$tip.label)
which(!pruned_tree$tip.label  %in% names(pruned_ranges))
identical(names(pruned_ranges))
names(pruned_ranges)
unique(names(pruned_ranges))
duplicated(names(pruned_ranges))
which(duplicated(names(pruned_ranges)))
names(pruned_ranges)[which(duplicated(names(pruned_ranges)))]
pruned_ranges
pruned_ranges
length(pruned_ranges)
# removing duplicated ranges (doing this for speed, but we should probably look at this more careful later)
pruned_ranges[which(duplicated(names(pruned_ranges)))] <- NULL
length(pruned_ranges)
tree
pruned_tree
library(ape)
library(raster)
library(maptools)
library(picante)
data(wrld_simpl)
# Calculating PD using function picante::pd
#' @param list_of_ranges A list of rasters with the approx. distribution of species
#' @param tree A phylogenetic tree including the same species as in list_of_ranges; tip.labels has to be the same as names(list_of_ranges)
#' @param cut A vector of longitudes and latitudes on where to cut the maps to speed up PD calculation
#' @param include.root Whether to include the root of the tree in the calculations of PD
PDranges <- function(list_of_ranges, tree, cut=NULL, include.root=TRUE) {
ranges = list_of_ranges
template.map <- readRDS("data/template.map.Rdata")
if(!is.null(cut)) {
template.map <- crop(template.map, extent(cut[1],cut[2],cut[3],cut[4]))
}
rasters1 <- list()
matrixPD1 <- matrix(0, ncol = 1, nrow = ncell(template.map))
matrixPD1 <- data.frame(matrixPD1)
for (ranges_index in 1:length(ranges)) { # very ineficient loop to get matrix for PD
Sys.time() -> start_time
r1 <- ranges[[ranges_index]]
r1[is.na(r1)] <- 0
r1 <- raster::resample(r1, template.map)
rasters1[[ranges_index]] <- raster::mask(r1, template.map)
temp <- as.data.frame(values(rasters1[[ranges_index]]))
colnames(temp) <- names(ranges)[ranges_index]
matrixPD1 <- cbind(matrixPD1, temp)
print(c(ranges_index, "in", length(ranges)))
Sys.time() -> end_time
print(end_time-start_time)
}
names(rasters1) <- names(ranges)
matrixPD1[is.na(matrixPD1)] <- 0 #
matrixPD1 <- matrixPD1[,2:ncol(matrixPD1)]
pd_final1 <- picante::pd(matrixPD1, tree, include.root=include.root)
pdMAP <- template.map
values(pdMAP) <- pd_final1[,1]
pdMAP <- raster::mask(pdMAP, template.map)
return(pdMAP)
}
GetSpRichness <- function (list_of_ranges) {
ranges = list_of_ranges
template.map <- readRDS("data/template.map.Rdata")
tmp.raster.list <- list()
for (i in 1:length(ranges)) {
r1 <- ranges[[i]]
r1 <- raster::resample(r1, template.map)
r1[is.na(r1)] <- 0
tmp.raster.list[[i]] <- raster::mask(r1, template.map)
print(i)
}
names(tmp.raster.list) <- names(ranges)
sprichness_map <- raster::calc(raster::stack(tmp.raster.list), sum)
return(sprichness_map)
}
GetResDistribution <- function(raster1, raster2) {
template.map <- readRDS("data/template.map.Rdata")
template <- crop(template.map, raster::extent(raster1))
raster1[raster1[]==0] <- NA
raster2[raster2[]==0] <- NA
l.model <- stats::lm(raster::getValues(raster1) ~ raster::getValues(raster2), na.action = na.exclude)
res.raster <- template
res.raster[] <- as.numeric(stats::residuals.lm(l.model))
res.raster <- raster::mask(res.raster, template)
return(res.raster)
}
# gets a table with raster values per latitudinal bin
PlotLDG <- function (raster_richness, min = 23, max = 55, bin = 1) {
intervals <- seq(min, max-bin, bin)
c0 <- rasterToPoints(raster_richness)
richness_bin <- matrix(ncol=2, nrow=0)
for(bin_index in sequence(length(intervals))) {
bin0 <- c(intervals[bin_index], intervals[bin_index]+bin)
species_bin <- c0[which(c0[,2] >= bin0[1] & c0[,2] < bin0[2]),]
if(length(species_bin[,3])==0) {
species_richness_bin <- 0
} else {
species_richness_bin <- max(species_bin[,3]) }
richness_bin <- rbind(richness_bin, c(intervals[bin_index], species_richness_bin))
}
return(richness_bin)
}
# Input:
# (1) Tree
tree <- pruned_tree
all_ploidy_single_df
ranges_w_data
ranges_w_data!="no_data"
trait <- subset(all_ploidy_single_df, ranges_w_data!="no_data")
trait
nrow(trait)
names(ranges)[which(names(ranges) %in% tree$tip.label)]
which(names(ranges) %in% tree$tip.label)
names(ranges) %in% tree$tip.label)
trait$Taxon %in% tree$tip.label
trait <- subset(trait, trait$Taxon %in% tree$tip.label)
trait
nrow(trait)
!tree$tip.label %in% trait$Taxon
tree$tip.label %in% trait$Taxon
which(!pruned_tree$tip.label %in% trait$Taxon)
pruned_tree$tip.label[which(!pruned_tree$tip.label %in% trait$Taxon)]
trait <- subset(all_ploidy_single_df, ranges_w_data!="no_data")
trait
pruned_tree
# Input:
# (1) Tree
tree = pruned_tree
# (2) Trait database (discrete)
trait = subset(trait, trait$Taxon %in% tree$tip.label)
# (3) Distribution points or layers
ranges = ranges
# Organizing data so that species match
ranges <- ranges[intersect(names(ranges), trait$species)]
trait <- trait[trait$species %in% intersect(names(ranges), trait$species),]
tree <- keep.tip(tree, names(ranges))
ranges
trait
tree
tree <- read.tree("Polyploidy-gradient/smith_and_brown.tre.txt")
pruned_tree <- keep.tip(tree, names(ranges)[which(names(ranges) %in% tree$tip.label)])
pruned_ranges <- ranges
pruned_ranges[which(!names(pruned_ranges) %in% pruned_tree$tip.label)] <- NULL
# removing duplicated ranges (doing this for speed, but we should probably look at this more careful later)
pruned_ranges[which(duplicated(names(pruned_ranges)))] <- NULL
# Input:
# (1) Tree
tree = pruned_tree
tree
tree
tree <- read.tree("Polyploidy-gradient/smith_and_brown.tre.txt")
tree
pruned_tree <- keep.tip(tree, names(ranges)[which(names(ranges) %in% tree$tip.label)])
tree <- read.tree("Polyploidy-gradient/smith_and_brown.tre.txt")
length(ranges_w_data_final)
ranges <- lapply(paste0(range.dir,"/", ranges_w_data_final), raster)
labels <- c()
for (i in 1:length(ranges_w_data_final)){
tmp1 <- strsplit(ranges_w_data_final[i], "__")[[1]][2]
if(is.na(tmp1)) {
labels[i] <- "no_name"
} else {
tmp2 <- sub("\\.tif$","", tmp1)
labels[i] <- sub(" ","_", tmp2)
}
}
names(ranges) <- labels
ranges
tree <- read.tree("Polyploidy-gradient/smith_and_brown.tre.txt")
pruned_tree <- keep.tip(tree, names(ranges)[which(names(ranges) %in% tree$tip.label)])
pruned_tree
pruned_ranges <- ranges
pruned_ranges[which(!names(pruned_ranges) %in% pruned_tree$tip.label)] <- NULL
pruned_ranges
# removing duplicated ranges (doing this for speed, but we should probably look at this more careful later)
pruned_ranges[which(duplicated(names(pruned_ranges)))] <- NULL
pruned_ranges
# Input:
# (1) Tree
tree = pruned_tree
# (2) Trait database (discrete)
trait = subset(trait, trait$Taxon %in% tree$tip.label)
# (3) Distribution points or layers
ranges = ranges
# Organizing data so that species match
ranges <- ranges[intersect(names(ranges), trait$species)]
ranges
ranges <- lapply(paste0(range.dir,"/", ranges_w_data_final), raster)
labels <- c()
for (i in 1:length(ranges_w_data_final)){
tmp1 <- strsplit(ranges_w_data_final[i], "__")[[1]][2]
if(is.na(tmp1)) {
labels[i] <- "no_name"
} else {
tmp2 <- sub("\\.tif$","", tmp1)
labels[i] <- sub(" ","_", tmp2)
}
}
names(ranges) <- labels
tree <- read.tree("Polyploidy-gradient/smith_and_brown.tre.txt")
pruned_tree <- keep.tip(tree, names(ranges)[which(names(ranges) %in% tree$tip.label)])
pruned_tree
pruned_ranges <- ranges
pruned_ranges[which(!names(pruned_ranges) %in% pruned_tree$tip.label)] <- NULL
# removing duplicated ranges (doing this for speed, but we should probably look at this more careful later)
pruned_ranges[which(duplicated(names(pruned_ranges)))] <- NULL
intersect(names(ranges), trait$Taxon)
ranges
trait$Taxon
trait
trait <- subset(all_ploidy_single_df, ranges_w_data!="no_data")
trait
trait, trait$Taxon %in% tree$tip.label
subset(trait, trait$Taxon %in% tree$tip.label)
# (2) Trait database (discrete)
trait = subset(trait, trait$Taxon %in% tree$tip.label)
trait
intersect(names(ranges), trait$Taxon)
ranges[intersect(names(ranges), trait$Taxon)]
# Organizing data so that species match
ranges <- ranges[intersect(names(ranges), trait$Taxon)]
trait$Taxon %in% intersect(names(ranges), trait$Taxon)
trait <- trait[trait$Taxon %in% intersect(names(ranges), trait$Taxon),]
trait
keep.tip(tree, names(ranges))
tree <- keep.tip(tree, names(ranges))
tree
nrow(trait)
length(ranges)
trait[!trait$Taxon %in% intersect(names(ranges), trait$Taxon),]
intersect(names(ranges), trait$Taxon)
length(intersect(names(ranges), trait$Taxon))
tree
trait$Taxon %in% intersect(names(ranges), trait$Taxon)
length(trait$Taxon %in% intersect(names(ranges), trait$Taxon))
intersect(names(ranges), trait$Taxon) %in% trait$Taxon
nrow(trait[intersect(names(ranges), trait$Taxon) %in% trait$Taxon,])
intersect(names(ranges), trait$Taxon) %in% trait$Taxon
nrow(subset(trait, intersect(names(ranges), trait$Taxon) %in% trait$Taxon))
intersect(names(ranges), trait$Taxon) %in% trait$Taxon
!intersect(names(ranges), trait$Taxon) %in% trait$Taxon
trait
trait[intersect(names(ranges), trait$Taxon) %in% trait$Taxon,]
trait <- trait[intersect(names(ranges), trait$Taxon) %in% trait$Taxon,]
keep.tip(tree, names(ranges))
tree <- keep.tip(tree, names(ranges))
#
colnames(trait) <- c("species","polyploid")
trait$polyploid==1
which(trait$polyploid==1)
trait$polyploid[which(trait$polyploid==1)]
trait$polyploid[which(trait$polyploid==1)] <- "polyploid"
trait
trait$polyploid[which(trait$polyploid==0)] <- "diploid"
# Separating diploids and polyploids
p_species <- trait$species[which(trait$polyploid=="polyploid")]
d_species <- trait$species[which(trait$polyploid=="diploid")]
p_species
d_species
d_ranges <- ranges[which(names(ranges) %in% d_species)]
p_ranges <- ranges[which(names(ranges) %in% p_species)]
d_tree <- keep.tip(tree, names(ranges)[which(names(ranges) %in% d_species)])
p_tree <- keep.tip(tree, names(ranges)[which(names(ranges) %in% p_species)])
d_tree
p_tree
# for polyploids:
p_sp_richness <- GetSpRichness(p_ranges)
# for polyploids:
p_sp_richness <- GetSpRichness(p_ranges)
p_ranges
tree
# Taking a sample of 100 species
sample <- pruned_tree$tip.label[1:100]
?sample
# Taking a sample of 100 species
sample(pruned_tree$tip.label, 100, replace=F)
# Taking a sample of 100 species
sample <- sample(pruned_tree$tip.label, 100, replace=F)
trait
tree = keep.tip(tree, sample)
tree
trait = subset(trait, trait$Taxon %in% tree$tip.label)
trait
trait <- subset(all_ploidy_single_df, ranges_w_data!="no_data")
trait
subset(trait, trait$Taxon %in% tree$tip.label)
trait = subset(trait, trait$Taxon %in% tree$tip.label)
tree$tip.label
ranges = ranges[tree$tip.label]
ranges
length(ranges)
#
colnames(trait) <- c("species","polyploid")
trait$polyploid[which(trait$polyploid==1)] <- "polyploid"
trait$polyploid[which(trait$polyploid==0)] <- "diploid"
# Separating diploids and polyploids
p_species <- trait$species[which(trait$polyploid=="polyploid")]
d_species <- trait$species[which(trait$polyploid=="diploid")]
p_species
d_species
d_ranges <- ranges[which(names(ranges) %in% d_species)]
p_ranges <- ranges[which(names(ranges) %in% p_species)]
d_tree <- keep.tip(tree, names(ranges)[which(names(ranges) %in% d_species)])
p_tree <- keep.tip(tree, names(ranges)[which(names(ranges) %in% p_species)])
# for polyploids:
p_sp_richness <- GetSpRichness(p_ranges)
p_pd_map <- PDranges(p_ranges, p_tree, cut=cut)
p_tree
p_ranges
p_pd_map <- PDranges(p_ranges, p_tree)
p_pd_map
plot(p_pd_map)
p_sp_richness
p_sp_richness <- crop(p_sp_richness, extent(p_pd_map))
p_res_map <- GetResDistribution(p_sp_richness, p_pd_map) # do regression from full sp richness or only polyploid sp richness?
plot(p_res_map)
# for diploids:
d_sp_richness <- GetSpRichness(d_ranges)
d_pd_map <- PDranges(d_ranges, d_tree)
d_sp_richness <- crop(d_sp_richness, extent(d_pd_map))
d_res_map <- GetResDistribution(d_sp_richness, d_pd_map) # do regression from full sp richness or only polyploid sp richness?
# checking plots:
plot(p_sp_richness)
# This distribute values of rasters across latitudinal bins for plots
thing <- PlotLDG(p_sp_richness)
plot(thing)
setwd("~/Desktop/Colabs/Eric_Polyploids")
raw_files_dir <- paste0(getwd(),"/CE_out")
ploidy_files <- list.files(raw_files_dir,".csv")
all_ploidy <- lapply(paste0(raw_files_dir, "/", ploidy_files), read.csv)
all_ploidy_single_df <- do.call(rbind, all_ploidy)
all_ploidy_single_df <- all_ploidy_single_df[,c("Taxon","Ploidy.inference")]
all_ploidy_single_df <- subset(all_ploidy_single_df, !is.na(all_ploidy_single_df$Ploidy.inference))
# taxize GBIF
#taxized_names <- resolveGBIF(all_ploidy_single_df$Taxon)
#save(taxized_names, file="taxized_names.Rsave")
#beepr::beep("complete")
# Too long, trying alternative with ranges that I already have:
species_w_data <- sub("_", " ", all_ploidy_single_df$Taxon)
# loading ranges
range.dir <- "~/Desktop/desentulhando/nursery/Data/rasters_and_sf/phylosig_range_size/polygons_models_ranges/ranges"
all_files <- list.files(paste0(range.dir), "\\.tif$")
ranges_w_data <- c()
for(i in 1:length(species_w_data)) {
if(any(grepl(species_w_data[i], all_files))){
ranges_w_data[i]  <- all_files[grep(species_w_data[i], all_files)][1]
} else {
ranges_w_data[i] <- "no_data"
}
#cat("","\n")
cat(i, "done.")
cat("","\r")
}
ranges_w_data_final <- subset(ranges_w_data, ranges_w_data!="no_data")
trait <- subset(all_ploidy_single_df, ranges_w_data!="no_data")
ranges <- lapply(paste0(range.dir,"/", ranges_w_data_final), raster)
labels <- c()
for (i in 1:length(ranges_w_data_final)){
tmp1 <- strsplit(ranges_w_data_final[i], "__")[[1]][2]
if(is.na(tmp1)) {
labels[i] <- "no_name"
} else {
tmp2 <- sub("\\.tif$","", tmp1)
labels[i] <- sub(" ","_", tmp2)
}
}
names(ranges) <- labels
ranges
names(ranges) <- labels
tree <- read.tree("Polyploidy-gradient/smith_and_brown.tre.txt")
pruned_tree <- keep.tip(tree, names(ranges)[which(names(ranges) %in% tree$tip.label)])
pruned_tree
pruned_ranges <- ranges
pruned_ranges[which(!names(pruned_ranges) %in% pruned_tree$tip.label)] <- NULL
# removing duplicated ranges (doing this for speed, but we should probably look at this more careful later)
pruned_ranges[which(duplicated(names(pruned_ranges)))] <- NULL
# Input:
# (1) Tree
tree = pruned_tree
# (2) Trait database (discrete)
trait = subset(trait, trait$Taxon %in% tree$tip.label)
# (3) Distribution points or layers
ranges = ranges
tree
trait
ranges
#
colnames(trait) <- c("species","polyploid")
trait$polyploid[which(trait$polyploid==1)] <- "polyploid"
trait$polyploid[which(trait$polyploid==0)] <- "diploid"
# Separating diploids and polyploids
p_species <- trait$species[which(trait$polyploid=="polyploid")]
d_species <- trait$species[which(trait$polyploid=="diploid")]
p_species
d_species
d_species <- trait$species[which(trait$polyploid=="diploid")]
d_ranges <- ranges[which(names(ranges) %in% d_species)]
p_ranges <- ranges[which(names(ranges) %in% p_species)]
d_tree <- keep.tip(tree, names(ranges)[which(names(ranges) %in% d_species)])
p_tree <- keep.tip(tree, names(ranges)[which(names(ranges) %in% p_species)])
# for polyploids:
p_sp_richness <- GetSpRichness(p_ranges)
save(p_sp_richness, file="p_sp_richness.Rsave")
install.packages("rlist")
setwd("~/Desktop/Colabs/Eve_MyrtalesPAFTOL/myrtales/")
rm(list=ls())
